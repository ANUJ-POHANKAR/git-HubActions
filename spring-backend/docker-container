sudo docker run -it --entrypoint /bin/bash <image_name>
mvn clean package

Base Image:
FROM maven:3.9.4-eclipse-temurin-17 as builder: This line defines the base image for the build stage. It uses the official Maven image with Eclipse Temurin 17 as the Java Runtime Environment (JRE). The as builder keyword gives this stage a name, which will be useful later.
2. Working Directory:
WORKDIR /app: Sets the working directory within the container to /app. This is where all subsequent commands will be executed.
3. Copy Project Files:
COPY pom.xml .: Copies the pom.xml file from the host machine to the /app directory within the container.
COPY .mvn/ .mvn/: Copies the .mvn directory (if it exists) to the container, which might contain Maven settings or plugins.
COPY mvnw .: Copies the mvnw file (if it exists) to the container. This is the wrapper script for Maven, which can be useful for managing Maven versions and dependencies across different environments.
4. Resolve Dependencies:
RUN ./mvnw dependency:resolve dependency:resolve-plugins: This command executes the Maven wrapper script to resolve all project dependencies and plugin dependencies. This ensures that all necessary libraries are available during the build process.
5. Copy Source Code:
COPY src ./src: Copies the src directory (containing the source code) from the host machine to the /app/src directory within the container.
6. Build the Project:
RUN ./mvnw clean package -DskipTests: This command executes the Maven wrapper script to clean the build directory, compile the source code, and package the project into a JAR file. The -DskipTests flag skips running unit tests during the build process.
7. Switch to Runtime Image:
FROM eclipse-temurin:17-jre-alpine: This line defines the base image for the runtime stage. It uses a smaller, Alpine-based JRE image, which reduces the final image size.
8. Working Directory (Runtime):
WORKDIR /app: Sets the working directory within the runtime container to /app.
9. Copy JAR File:
COPY --from=builder /app/target/*.jar app.jar: This command copies the built JAR file from the builder stage (where it was created) to the /app directory within the runtime container.
10. Expose Port:
EXPOSE 8080: This line informs Docker that the container will listen on port 8080.
11. Entrypoint:
ENTRYPOINT ["java", "-jar", "app.jar"]: This line specifies the command that will be executed when the container starts. It runs the Java executable with the -jar option to execute the app.jar file.

another dockerfile.

# Stage 1: Build Stage
FROM maven:3.9.5-eclipse-temurin-17 AS builder
WORKDIR /app
COPY spring-backend/pom.xml .
COPY spring-backend/src ./src
RUN mvn -f pom.xml clean package -DskipTests

# Stage 2: Runtime Stage
FROM eclipse-temurin:17-jre-alpine
WORKDIR /app
COPY --from=builder /app/target/*.jar backend.jar
EXPOSE 8080
ENTRYPOINT ["java", "-jar", "backend.jar"]
